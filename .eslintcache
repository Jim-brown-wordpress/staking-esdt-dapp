[{"E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\index.tsx":"1","E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\App.tsx":"2","E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\ContextWrapper.tsx":"3","E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\config.tsx":"4","E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\routes.ts":"5","E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\pages\\UnlockPage\\index.tsx":"6","E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\pages\\PageNotFound\\index.tsx":"7","E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\components\\Layout\\index.tsx":"8","E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\pages\\Sft\\index.tsx":"9","E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\pages\\Profile\\index.tsx":"10","E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\pages\\Home\\index.tsx":"11","E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\components\\PageTitle\\index.tsx":"12","E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\components\\Layout\\Navbar\\index.tsx":"13","E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\components\\Layout\\Footer\\index.tsx":"14","E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\utils\\const.tsx":"15","E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\utils\\convert.tsx":"16","E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\components\\Card\\index.tsx":"17","E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\data.tsx":"18","E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\components\\Time\\index.tsx":"19"},{"size":212,"mtime":1665053813765,"results":"20","hashOfConfig":"21"},{"size":677,"mtime":1676338109884,"results":"22","hashOfConfig":"21"},{"size":1137,"mtime":1676337123602,"results":"23","hashOfConfig":"21"},{"size":1602,"mtime":1676337898129,"results":"24","hashOfConfig":"21"},{"size":1072,"mtime":1671802337060,"results":"25","hashOfConfig":"21"},{"size":2672,"mtime":1676337449674,"results":"26","hashOfConfig":"21"},{"size":1110,"mtime":1665053813765,"results":"27","hashOfConfig":"21"},{"size":800,"mtime":1676337718094,"results":"28","hashOfConfig":"21"},{"size":20989,"mtime":1676337573072,"results":"29","hashOfConfig":"21"},{"size":10633,"mtime":1676337607842,"results":"30","hashOfConfig":"21"},{"size":19699,"mtime":1676337658570,"results":"31","hashOfConfig":"21"},{"size":294,"mtime":1665053813764,"results":"32","hashOfConfig":"21"},{"size":2697,"mtime":1676337701085,"results":"33","hashOfConfig":"21"},{"size":677,"mtime":1665053813764,"results":"34","hashOfConfig":"21"},{"size":112,"mtime":1665053813766,"results":"35","hashOfConfig":"21"},{"size":1706,"mtime":1676337305724,"results":"36","hashOfConfig":"21"},{"size":6300,"mtime":1676337747273,"results":"37","hashOfConfig":"21"},{"size":1495,"mtime":1667239217799,"results":"38","hashOfConfig":"21"},{"size":1535,"mtime":1667239217788,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"z2uomk",{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":1,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\index.tsx",[],"E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\App.tsx",[],"E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\ContextWrapper.tsx",[],"E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\config.tsx",[],"E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\routes.ts",[],"E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\pages\\UnlockPage\\index.tsx",[],"E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\pages\\PageNotFound\\index.tsx",[],"E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\components\\Layout\\index.tsx",[],"E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\pages\\Sft\\index.tsx",["83","84","85","86","87","88","89","90"],"import React, { useState, useEffect } from 'react';\r\nimport { useGetAccountInfo } from '@multiversx/sdk-dapp/hooks';\r\nimport { useGetNetworkConfig, useGetPendingTransactions } from '@multiversx/sdk-dapp/hooks';\r\nimport { sendTransactions } from '@multiversx/sdk-dapp/services';\r\nimport { refreshAccount } from '@multiversx/sdk-dapp/utils';\r\nimport {\r\n  Account,\r\n  TransactionPayload,\r\n  Address,\r\n  SmartContract,\r\n  AbiRegistry,\r\n  BigUIntValue,\r\n  ContractFunction,\r\n  AddressValue,\r\n  SmartContractAbi,\r\n  ResultsParser,\r\n  TokenPayment,\r\n  TypedValue,\r\n  BytesValue,\r\n  ArgSerializer\r\n} from '@multiversx/sdk-core/out';\r\nimport { ApiNetworkProvider } from '@multiversx/sdk-network-providers/out';\r\nimport axios from 'axios';\r\nimport { Tabs, Tab } from 'react-bootstrap';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport sftAbi from 'abi/sft/city-staking-sc.abi.json';\r\nimport Card from 'components/Card';\r\nimport {\r\n  SFT_STAKING_CONTRACT_ADDRESS,\r\n  SFT_STAKING_CONTRACT_NAME,\r\n  TOKEN_DECIMAL,\r\n  GATEWAY,\r\n  SFT_COLLECTION_ID,\r\n  IS_DEV,\r\n  YEARLY_TOKEN_DISTRIBUTION\r\n} from 'config';\r\nimport { SECOND_IN_MILLI } from 'utils/const';\r\n\r\nimport { convertWeiToEgld, convertTimestampToDays } from 'utils/convert';\r\n\r\nimport './index.scss';\r\n\r\nconst Sft = () => {\r\n  const { address } = useGetAccountInfo();\r\n  const isLoggedIn = Boolean(address);\r\n  const { hasPendingTransactions } = useGetPendingTransactions();\r\n  const { network } = useGetNetworkConfig();\r\n  const networkProvider = new ApiNetworkProvider(network.apiAddress);\r\n\r\n  // load smart contract abi and parse it to SmartContract object for tx\r\n  const [contractInteractor, setContractInteractor] = useState<any>(undefined);\r\n  useEffect(() => {\r\n    const ABI = sftAbi as any;\r\n    // console.log(ABI);\r\n    (async () => {\r\n      const abiRegistry = AbiRegistry.create(ABI);\r\n      const abi = new SmartContractAbi(abiRegistry, [\r\n        SFT_STAKING_CONTRACT_NAME\r\n      ]);\r\n      const contract = new SmartContract({\r\n        address: new Address(SFT_STAKING_CONTRACT_ADDRESS),\r\n        abi: abi\r\n      });\r\n      setContractInteractor(contract);\r\n    })();\r\n  }, []); // [] makes useEffect run once\r\n\r\n  const [status, setStatus] = useState(1);\r\n  const [sftDatas, setSftDatas] = useState<any>();\r\n  const [stakingStatus, setStakingStatus] = useState<any>();\r\n  const [accountStatus, setAccountStatus] = useState<any>();\r\n  const [userWalletAmount, setUserWalletAmount] = useState(0);\r\n  const [userStakedAmount, setUserStakedAmount] = useState(0);\r\n  const [userUnbondingAmount, setUserUnbondingAmount] = useState(0);\r\n  const [userUnbonedAmount, setUserUnbondedAmount] = useState(0);\r\n  const [baseApr, setBaseApr] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (isLoggedIn) {\r\n      axios\r\n        .get(\r\n          `${GATEWAY}/accounts/${address}/nfts?from=0&size=500&collection=${SFT_COLLECTION_ID}`\r\n        )\r\n        .then((res) => {\r\n          // console.log(res);\r\n          if (res.status === 200 && res?.data?.length > 0) {\r\n            let walletAmount = 0;\r\n            const items: any = [];\r\n            res.data.map((item: any) => {\r\n              const status = {\r\n                user_staked_nft_balance: 0,\r\n                user_pool_score: 0,\r\n                user_rewards: 0,\r\n                nft_nonce: item.nonce,\r\n                user_current_amount_per_nonce: item.balance,\r\n                user_staked_amount_per_nonce: 0,\r\n                user_unbonding_amount_per_nonce: 0,\r\n                user_unbonded_amount_per_nonce: 0,\r\n                user_unbonding_start_timestamp_per_nonce: 0,\r\n                user_unbonding_end_timestamp_per_nonce: 0,\r\n                apr: 0\r\n              };\r\n\r\n              walletAmount += parseInt(item.balance);\r\n              items.push(status);\r\n            });\r\n            // console.log(items);\r\n            setSftDatas(items);\r\n            setUserWalletAmount(walletAmount);\r\n          } else {\r\n            setSftDatas([]);\r\n            setUserWalletAmount(0);\r\n          }\r\n        });\r\n    }\r\n\r\n    (async () => {\r\n      if (!contractInteractor) return;\r\n\r\n      const query = contractInteractor.createQuery({\r\n        func: new ContractFunction('getStakingStatus')\r\n      });\r\n      const resultsParser = new ResultsParser();\r\n      const response = await networkProvider.queryContract(query);\r\n      const endpointDefinition =\r\n        contractInteractor.getEndpoint('getStakingStatus');\r\n      const res = resultsParser.parseQueryResponse(\r\n        response,\r\n        endpointDefinition\r\n      );\r\n      const value = res.firstValue?.valueOf();\r\n\r\n      const status = {\r\n        stake_nft_token_id: value.stake_nft_token_id.toString(),\r\n        reward_token_id: value.reward_token_id.toString(),\r\n        unbond_duration: value.unbond_duration.toNumber() * SECOND_IN_MILLI,\r\n        total_nft_nonces: value.total_nft_nonces.toNumber(),\r\n        bonus_points: value.bonus_points.toNumber() / 10000,\r\n        total_staked_nft_balance: value.total_staked_nft_balance.toNumber(),\r\n        total_pool_score: value.total_pool_score.toNumber(),\r\n        nft_price: convertWeiToEgld(value.nft_price.toNumber(), TOKEN_DECIMAL)\r\n      };\r\n      // console.log(status);\r\n      setStakingStatus(status);\r\n\r\n      const apr = YEARLY_TOKEN_DISTRIBUTION / status.total_pool_score / 10;\r\n      setBaseApr(apr);\r\n    })();\r\n\r\n    (async () => {\r\n      if (!contractInteractor) return;\r\n\r\n      if (isLoggedIn) {\r\n        const query = contractInteractor.createQuery({\r\n          func: new ContractFunction('getAccountState'),\r\n          args: [new AddressValue(new Address(address))]\r\n        });\r\n        const resultsParser = new ResultsParser();\r\n        const response = await networkProvider.queryContract(query);\r\n        const endpointDefinition =\r\n          contractInteractor.getEndpoint('getAccountState');\r\n        const res = resultsParser.parseQueryResponse(\r\n          response,\r\n          endpointDefinition\r\n        );\r\n        const value = res.firstValue?.valueOf();\r\n\r\n        let stakedAmount = 0;\r\n        let unbondingAmount = 0;\r\n        let unbondedAmount = 0;\r\n        const items: any = [];\r\n        value.map((item: any) => {\r\n          const status = {\r\n            user_staked_nft_balance: item.user_staked_nft_balance.toNumber(),\r\n            user_pool_score: item.user_pool_score.toNumber(),\r\n            user_rewards: convertWeiToEgld(\r\n              item.user_rewards.toNumber(),\r\n              TOKEN_DECIMAL\r\n            ),\r\n            nft_nonce: item.nft_nonce.toNumber(),\r\n            user_current_amount_per_nonce: 0,\r\n            user_staked_amount_per_nonce:\r\n              item.user_staked_amount_per_nonce.toNumber(),\r\n            user_unbonding_amount_per_nonce:\r\n              item.user_unbonding_amount_per_nonce.toNumber(),\r\n            user_unbonded_amount_per_nonce:\r\n              item.user_unbonded_amount_per_nonce.toNumber(),\r\n            user_unbonding_start_timestamp_per_nonce:\r\n              item.user_unbonding_start_timestamp_per_nonce.toNumber() *\r\n              SECOND_IN_MILLI,\r\n            user_unbonding_end_timestamp_per_nonce:\r\n              item.user_unbonding_end_timestamp_per_nonce.toNumber() *\r\n              SECOND_IN_MILLI,\r\n            apr: item.apr.toNumber() / 100\r\n          };\r\n\r\n          items.push(status);\r\n          stakedAmount += item.user_staked_amount_per_nonce.toNumber();\r\n          unbondingAmount += item.user_unbonding_amount_per_nonce.toNumber();\r\n          unbondedAmount += item.user_unbonded_amount_per_nonce.toNumber();\r\n        });\r\n        // console.log(items);\r\n        setAccountStatus(items);\r\n\r\n        setUserStakedAmount(stakedAmount);\r\n        setUserUnbondingAmount(unbondingAmount);\r\n        setUserUnbondedAmount(unbondedAmount);\r\n      }\r\n    })();\r\n  }, [contractInteractor, hasPendingTransactions]);\r\n\r\n  const handleClaimReward = async () => {\r\n    const tx = {\r\n      receiver: SFT_STAKING_CONTRACT_ADDRESS,\r\n      data: 'claimReward',\r\n      value: 0,\r\n      gasLimit: 10000000\r\n    };\r\n\r\n    await refreshAccount();\r\n    await sendTransactions({\r\n      transactions: tx\r\n    });\r\n  };\r\n\r\n  const handleStakeAll = async () => {\r\n    // stake\r\n    const token_payments: TokenPayment[] = [];\r\n    sftDatas.forEach((element: any) => {\r\n      // const integer = parseInt(element.nonce, 16);\r\n      token_payments.push(\r\n        TokenPayment.semiFungible(\r\n          SFT_COLLECTION_ID,\r\n          element.nft_nonce,\r\n          element.user_current_amount_per_nonce\r\n        )\r\n      );\r\n    });\r\n    let gas = 10000000 + 4000000 * sftDatas.length;\r\n    if (gas > 600000000) gas = 600000000;\r\n\r\n    const userAccount = new Account(new Address(address));\r\n    const tx = contractInteractor.methods\r\n      .stake()\r\n      .withNonce(userAccount.nonce)\r\n      .withGasLimit(gas)\r\n      .withChainID(IS_DEV ? 'D' : '1')\r\n      .withMultiESDTNFTTransfer(token_payments, new Address(address))\r\n      .buildTransaction();\r\n\r\n    await refreshAccount();\r\n\r\n    await sendTransactions({\r\n      transactions: [tx]\r\n    });\r\n  };\r\n\r\n  const handleUnstakeAll = async () => {\r\n    // unstake\r\n    const args: TypedValue[] = [];\r\n    let len = 0;\r\n    accountStatus?.map((item: any, index: any) => {\r\n      if (item?.user_staked_amount_per_nonce > 0) {\r\n        args.push(BytesValue.fromUTF8(SFT_COLLECTION_ID));\r\n        args.push(new BigUIntValue(item?.nft_nonce.valueOf()));\r\n        args.push(\r\n          new BigUIntValue(item?.user_staked_amount_per_nonce.valueOf())\r\n        );\r\n        len++;\r\n      }\r\n    });\r\n\r\n    const { argumentsString } = new ArgSerializer().valuesToString(args);\r\n    const data = new TransactionPayload(`unstake@${argumentsString}`);\r\n    let gas = 10000000 + 4000000 * len;\r\n    if (gas > 600000000) gas = 600000000;\r\n    const tx = {\r\n      receiver: SFT_STAKING_CONTRACT_ADDRESS,\r\n      gasLimit: gas,\r\n      value: 0,\r\n      data: data.toString()\r\n    };\r\n    await refreshAccount();\r\n\r\n    await sendTransactions({\r\n      transactions: tx,\r\n      transactionsDisplayInfo: {\r\n        processingMessage: 'Processing Unstaking transaction',\r\n        errorMessage: 'An error has occured during Unstake',\r\n        successMessage: 'Unstaking transaction successful'\r\n      },\r\n      redirectAfterSign: false\r\n    });\r\n  };\r\n\r\n  const handleUnbondAll = async () => {\r\n    // claim nfts\r\n    const args: TypedValue[] = [];\r\n    let len = 0;\r\n    accountStatus?.map((item: any, index: any) => {\r\n      if (item?.user_unbonded_amount_per_nonce > 0) {\r\n        args.push(BytesValue.fromUTF8(SFT_COLLECTION_ID));\r\n        args.push(new BigUIntValue(item?.nft_nonce.valueOf()));\r\n        args.push(\r\n          new BigUIntValue(item?.user_unbonded_amount_per_nonce.valueOf())\r\n        );\r\n        len++;\r\n      }\r\n    });\r\n\r\n    const { argumentsString } = new ArgSerializer().valuesToString(args);\r\n    const data = new TransactionPayload(`claimNft@${argumentsString}`);\r\n    let gas = 10000000 + 4000000 * len;\r\n    if (gas > 600000000) gas = 600000000;\r\n    const tx = {\r\n      receiver: SFT_STAKING_CONTRACT_ADDRESS,\r\n      gasLimit: gas,\r\n      value: 0,\r\n      data: data.toString()\r\n    };\r\n    await refreshAccount();\r\n\r\n    await sendTransactions({\r\n      transactions: tx,\r\n      transactionsDisplayInfo: {\r\n        processingMessage: 'Processing Claim transaction',\r\n        errorMessage: 'An error has occured during Claim',\r\n        successMessage: 'Claim transaction successful'\r\n      },\r\n      redirectAfterSign: false\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className='container'>\r\n      <Row>\r\n        <Col lg={6} md={6} sm={12} className='container-left'>\r\n          <h1 className='cpc-styled'>Stake your CityNFTs</h1>\r\n          <p>\r\n          Staking a building awards 1 point, and the total score will be determined by the total number of buildings the staker has placed.\r\n          </p>\r\n\r\n          <p>\r\n            The formula to be used to calculate stake income is as follows:\r\n            <br />— <span style={{ fontWeight: 'bold' }}>Pool Share</span> =\r\n            User Score / Total Pool Score\r\n            <br />—{' '}\r\n            <span style={{ fontWeight: 'bold' }}>\r\n              Yearly Distributed Token\r\n            </span>{' '}\r\n            = 20,000,000 / 6 Years = 3,333,333 CYBER\r\n            <br />\r\n            <br />\r\n            <span style={{ fontWeight: 'bold' }}>NOTICE:</span> The unbonding period is 5 days. Every unstaking operation will reset the duration. If a user has all 14 different buildings, they will get a 1.5x score multiplier.\r\n          </p>\r\n\r\n          <div className='container-left-buttons'>\r\n            <a\r\n              href='https://xoxno.com/collection/CITYNFT-26cded'\r\n              target='_blank'\r\n              rel='noreferrer'\r\n            >\r\n              <button>BUY CityNFT</button>\r\n            </a>\r\n            <a\r\n              href='https://cyberpunkcity.com'\r\n            >\r\n            <button className='ml-3'>\r\n                GO TO HOMEPAGE\r\n            </button>\r\n            </a>\r\n          </div>\r\n        </Col>\r\n        <Col lg={6} md={6} sm={12}>\r\n          <div className='container-token-staking'>\r\n            <div className='row mb-5'>\r\n              <div className='col-6 text-left'>\r\n                <div className='row-title static'>TOTAL STAKED</div>\r\n                <div className='row-body'>\r\n                  {' '}\r\n                  {stakingStatus\r\n                    ? stakingStatus.total_staked_nft_balance\r\n                    : '-'}{' '}\r\n                  CityNFT\r\n                </div>\r\n              </div>\r\n              <div className='col-6 text-right'>\r\n                <div className='row-title static'>APR</div>\r\n                <div className='row-body'>\r\n                  {accountStatus\r\n                    ? accountStatus[0].apr.toFixed(2)\r\n                    : baseApr.toFixed(2)}{' '}\r\n                  %\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className='row mb-4'>\r\n              <div className='col-6 text-left'>\r\n                <div className='row-title static'>TOTAL SCORE</div>\r\n                <div className='row-body'>\r\n                  {' '}\r\n                  {stakingStatus ? stakingStatus.total_pool_score : '-'}\r\n                </div>\r\n              </div>\r\n              <div className='col-6 text-right'>\r\n                <div className='row-title'>MY STAKED NFTs</div>\r\n                <div className='row-body'>\r\n                  {' '}\r\n                  {accountStatus\r\n                    ? accountStatus[0].user_staked_nft_balance\r\n                    : '-'}\r\n                </div>\r\n                <div className='row-title'>MY SCORE</div>\r\n                <div className='row-body'>\r\n                  {accountStatus ? accountStatus[0].user_pool_score : '-'}\r\n                </div>\r\n                <div className='row-title'>MY REWARDS</div>\r\n                <div className='row-body'>\r\n                  {' '}\r\n                  {accountStatus\r\n                    ? accountStatus[0].user_rewards.toLocaleString(undefined, {\r\n                        minimumFractionDigits: 2,\r\n                        maximumFractionDigits: 2\r\n                      })\r\n                    : '-'}\r\n                </div>\r\n                <button\r\n                  className='is-style-cpc-btn-styled claim-reward'\r\n                  onClick={handleClaimReward}\r\n                >\r\n                  CLAIM REWARD\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col lg={12} className='mt-5 mb-5 sft-staking-status'>\r\n          <Tabs defaultActiveKey={1} id='uncontrolled-tab-example'>\r\n            <Tab eventKey={1} title={`WALLET (${userWalletAmount})`} onClick={() => setStatus(1)}>\r\n              <div className='row tab-1'>\r\n                <div className='col-12 nft-tab'>\r\n                  <div className='row mt-3 d-flex justify-content-end'>\r\n                    {sftDatas?.length > 0 ? (\r\n                      <button\r\n                        className='is-style-cpc-btn-styled stake'\r\n                        onClick={handleStakeAll}\r\n                      >\r\n                        STAKE ALL\r\n                      </button>\r\n                    ) : (\r\n                      <></>\r\n                    )}\r\n                  </div>\r\n                  <div className='row'>\r\n                    {sftDatas?.map((item: any, index: any) => {\r\n                      return (\r\n                        <Col\r\n                          lg={3}\r\n                          md={4}\r\n                          sm={6}\r\n                          className='container-right mt-5 mb-5'\r\n                          key={index}\r\n                        >\r\n                          <Card item={item} status={1} />\r\n                        </Col>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Tab>\r\n            <Tab eventKey={2} title={`STAKED (${userStakedAmount})`} onClick={() => setStatus(2)}>\r\n              <div className='row tab-2'>\r\n                <div className='col-12 nft-tab'>\r\n                  <div className='row mt-3 d-flex justify-content-end'>\r\n                    {accountStatus &&\r\n                    accountStatus[0]?.user_staked_nft_balance > 0 ? (\r\n                      <button\r\n                        className='is-style-cpc-btn-styled unstake'\r\n                        onClick={handleUnstakeAll}\r\n                      >\r\n                        UNSTAKE ALL\r\n                      </button>\r\n                    ) : (\r\n                      <></>\r\n                    )}\r\n                  </div>\r\n                  <div className='row'>\r\n                    {accountStatus?.map((item: any, index: any) => {\r\n                      if (item?.user_staked_amount_per_nonce > 0) {\r\n                        return (\r\n                          <Col\r\n                            lg={3}\r\n                            md={4}\r\n                            sm={6}\r\n                            className='container-right mt-5 mb-5'\r\n                            key={index}\r\n                          >\r\n                            <Card item={item} status={2} />\r\n                          </Col>\r\n                        );\r\n                      }\r\n                    })}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Tab>\r\n            <Tab eventKey={3} title={`UNBONDING (${userUnbondingAmount})`} onClick={() => setStatus(3)}>\r\n              <div className='row tab-2'>\r\n                <div className='col-12 nft-tab'>\r\n                  <div className='row mt-3'>\r\n                    {accountStatus?.map((item: any, index: any) => {\r\n                      if (item?.user_unbonding_amount_per_nonce > 0) {\r\n                        return (\r\n                          <Col\r\n                            lg={3}\r\n                            md={4}\r\n                            sm={6}\r\n                            className='container-right mt-5 mb-5'\r\n                            key={index}\r\n                          >\r\n                            <Card item={item} status={3} />\r\n                          </Col>\r\n                        );\r\n                      }\r\n                    })}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Tab>\r\n            <Tab eventKey={4} title={`UNBONDED (${userUnbonedAmount})`} onClick={() => setStatus(4)}>\r\n              <div className='row tab-2'>\r\n                <div className='col-12 nft-tab'>\r\n                  <div className='row mt-3 d-flex justify-content-end'>\r\n                    {userUnbonedAmount > 0 ? (\r\n                      <button\r\n                        className='is-style-cpc-btn-styled claim'\r\n                        onClick={handleUnbondAll}\r\n                      >\r\n                        WITHDRAW ALL\r\n                      </button>\r\n                    ) : (\r\n                      <></>\r\n                    )}\r\n                  </div>\r\n                  <div className='row'>\r\n                    {accountStatus?.map((item: any, index: any) => {\r\n                      if (item?.user_unbonded_amount_per_nonce > 0) {\r\n                        return (\r\n                          <Col\r\n                            lg={3}\r\n                            md={4}\r\n                            sm={6}\r\n                            className='container-right mt-5 mb-5'\r\n                            key={index}\r\n                          >\r\n                            <Card item={item} status={4} />\r\n                          </Col>\r\n                        );\r\n                      }\r\n                    })}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Tab>\r\n          </Tabs>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sft;\r\n","E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\pages\\Profile\\index.tsx",["91","92","93"],"import React, { useState } from 'react';\r\nimport { useGetNetworkConfig, useGetPendingTransactions } from '@multiversx/sdk-dapp/hooks';\r\nimport {\r\n  Address,\r\n  SmartContract,\r\n  AbiRegistry,\r\n  ContractFunction,\r\n  AddressValue,\r\n  SmartContractAbi,\r\n  ResultsParser\r\n} from '@multiversx/sdk-core/out';\r\nimport { ApiNetworkProvider } from '@multiversx/sdk-network-providers/out';\r\nimport axios from 'axios';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport esdtAbi from 'abi/esdt/city-staking-sc.abi.json';\r\nimport sftAbi from 'abi/sft/city-staking-sc.abi.json';\r\nimport {\r\n  SFT_STAKING_CONTRACT_ADDRESS,\r\n  SFT_STAKING_CONTRACT_NAME,\r\n  TOKEN_DECIMAL,\r\n  GATEWAY,\r\n  SFT_COLLECTION_ID,\r\n  CITIZEN_SFT_ID,\r\n  ESDT_STAKING_CONTRACT_NAME,\r\n  ESDT_STAKING_CONTRACT_ADDRESS,\r\n  TOKEN_ID,\r\n} from 'config';\r\nimport { convertWeiToEgld } from 'utils/convert';\r\n\r\nimport './index.scss';\r\n\r\nconst Profile = () => {\r\n  const { network } = useGetNetworkConfig();\r\n  const networkProvider = new ApiNetworkProvider(network.apiAddress);\r\n\r\n  const [cyberBalance, setCyberBalance] = useState(0);\r\n  const [cyberStakedBalance, setCyberStakedBalance] = useState(0);\r\n  const [sftDatas, setSftDatas] = useState<any>([]);\r\n  const [citizenSftDatas, setCitizenSftDatas] = useState<any>([]);\r\n\r\n  const [value, setValue] = useState<string>('');\r\n  const handleInput = (e: any) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const handleClick = async () => {\r\n    const userAddress = value.trim();\r\n    console.log(userAddress);\r\n\r\n    try {\r\n      const url = GATEWAY + '/accounts/' + userAddress + '/tokens/' + TOKEN_ID;\r\n      const response: any = await axios.get(url);\r\n      if (response.status == 200) {\r\n        const token = response.data;\r\n        const balance = token['balance'] / Math.pow(10, token['decimals']);\r\n        setCyberBalance(balance);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      setCyberBalance(0);\r\n    }\r\n\r\n    try {\r\n      const ESDT_ABI = esdtAbi as any;\r\n      const abiRegistry = AbiRegistry.create(ESDT_ABI);\r\n      const abi = new SmartContractAbi(abiRegistry, [\r\n        ESDT_STAKING_CONTRACT_NAME\r\n      ]);\r\n      const contract = new SmartContract({\r\n        address: new Address(ESDT_STAKING_CONTRACT_ADDRESS),\r\n        abi: abi\r\n      });\r\n      if (contract) {\r\n        const query = contract.createQuery({\r\n          func: new ContractFunction('getAccountState'),\r\n          args: [new AddressValue(new Address(userAddress))]\r\n        });\r\n        const resultsParser = new ResultsParser();\r\n        const responseQuery = await networkProvider.queryContract(query);\r\n        const endpointDefinition = contract.getEndpoint('getAccountState');\r\n        const res = resultsParser.parseQueryResponse(\r\n          responseQuery,\r\n          endpointDefinition\r\n        );\r\n        const values = res.firstValue?.valueOf();\r\n        const stakedAmount = convertWeiToEgld(\r\n          values.user_stake_balance.toNumber(),\r\n          TOKEN_DECIMAL\r\n        );\r\n        setCyberStakedBalance(stakedAmount);\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      setCyberStakedBalance(0);\r\n    }\r\n\r\n    const sfts: any = [\r\n      {\r\n        name: 'Hotel',\r\n        wallet: 0,\r\n        staked: 0\r\n      },\r\n      {\r\n        name: 'Airport',\r\n        wallet: 0,\r\n        staked: 0\r\n      },\r\n      {\r\n        name: 'Apartment',\r\n        wallet: 0,\r\n        staked: 0\r\n      },\r\n      {\r\n        name: 'Fire Dept.',\r\n        wallet: 0,\r\n        staked: 0\r\n      },\r\n      {\r\n        name: 'Gas Station',\r\n        wallet: 0,\r\n        staked: 0\r\n      },\r\n      {\r\n        name: 'Media Center',\r\n        wallet: 0,\r\n        staked: 0\r\n      },\r\n      {\r\n        name: 'Shopping M.',\r\n        wallet: 0,\r\n        staked: 0\r\n      },\r\n      {\r\n        name: 'Police St.',\r\n        wallet: 0,\r\n        staked: 0\r\n      },\r\n      {\r\n        name: 'Hospital',\r\n        wallet: 0,\r\n        staked: 0\r\n      },\r\n      {\r\n        name: 'Diner',\r\n        wallet: 0,\r\n        staked: 0\r\n      },\r\n      {\r\n        name: 'Residence',\r\n        wallet: 0,\r\n        staked: 0\r\n      },\r\n      {\r\n        name: 'Bus Station',\r\n        wallet: 0,\r\n        staked: 0\r\n      },\r\n      {\r\n        name: 'Night Club',\r\n        wallet: 0,\r\n        staked: 0\r\n      },\r\n      {\r\n        name: 'Finance Cen.',\r\n        wallet: 0,\r\n        staked: 0\r\n      }\r\n    ];\r\n\r\n    const sfts2: any = [\r\n      {\r\n        name: 'Lázaro',\r\n        wallet: 0\r\n      },\r\n      {\r\n        name: 'Kiera',\r\n        wallet: 0\r\n      },\r\n      {\r\n        name: 'Varujan',\r\n        wallet: 0\r\n      },\r\n      {\r\n        name: 'Jasna',\r\n        wallet: 0\r\n      },\r\n      {\r\n        name: 'HiMonkey',\r\n        wallet: 0\r\n      },\r\n      {\r\n        name: 'Aiko',\r\n        wallet: 0\r\n      },\r\n      {\r\n        name: 'Xerxes',\r\n        wallet: 0\r\n      },\r\n      {\r\n        name: 'Silena',\r\n        wallet: 0\r\n      },\r\n      {\r\n        name: 'Burton',\r\n        wallet: 0\r\n      },\r\n      {\r\n        name: 'Nisha',\r\n        wallet: 0\r\n      },\r\n      {\r\n        name: 'Bardrick',\r\n        wallet: 0\r\n      },\r\n      {\r\n        name: 'Layla',\r\n        wallet: 0\r\n      },\r\n      {\r\n        name: 'Unknown',\r\n        wallet: 0\r\n      },\r\n      {\r\n        name: 'Agrapina',\r\n        wallet: 0\r\n      },\r\n      {\r\n        name: 'Albert',\r\n        wallet: 0\r\n      }\r\n    ];\r\n\r\n    try {\r\n      const response = await axios.get(\r\n        `${GATEWAY}/accounts/${userAddress}/nfts?from=0&size=500&collections=${SFT_COLLECTION_ID},${CITIZEN_SFT_ID}`\r\n      );\r\n\r\n      console.log(response);\r\n      if (response.status === 200 && response?.data?.length > 0) {\r\n        response.data.map((item: any) => {\r\n          if (item.collection == SFT_COLLECTION_ID) {\r\n            sfts[item.nonce - 1].wallet = item.balance;\r\n          } else {\r\n            sfts2[item.nonce - 1].wallet = item.balance;\r\n          }\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n\r\n    try {\r\n      const ABI = sftAbi as any;\r\n      const abiRegistry = AbiRegistry.create(ABI);\r\n      const abi = new SmartContractAbi(abiRegistry, [\r\n        SFT_STAKING_CONTRACT_NAME\r\n      ]);\r\n      const contract = new SmartContract({\r\n        address: new Address(SFT_STAKING_CONTRACT_ADDRESS),\r\n        abi: abi\r\n      });\r\n      if (contract) {\r\n        const query = contract.createQuery({\r\n          func: new ContractFunction('getAccountState'),\r\n          args: [new AddressValue(new Address(userAddress))]\r\n        });\r\n        const resultsParser = new ResultsParser();\r\n        const response = await networkProvider.queryContract(query);\r\n        const endpointDefinition = contract.getEndpoint('getAccountState');\r\n        const res = resultsParser.parseQueryResponse(\r\n          response,\r\n          endpointDefinition\r\n        );\r\n        const value = res.firstValue?.valueOf();\r\n\r\n        value.map((item: any) => {\r\n          sfts[item.nft_nonce.toNumber() - 1].staked =\r\n            item.user_staked_amount_per_nonce.toNumber();\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n\r\n    setSftDatas(sfts);\r\n    setCitizenSftDatas(sfts2);\r\n\r\n    // try {\r\n    //   const response = await axios.get(\r\n    //     `${GATEWAY}/accounts/${userAddress}/nfts?from=0&size=500&collection=${CITIZEN_SFT_ID}`\r\n    //   );\r\n\r\n    //   if (response.status === 200 && response?.data?.length > 0) {\r\n    //     console.log(response.data);\r\n    //     setCitizenSftDatas(response.data);\r\n    //   }\r\n    // } catch (error) {\r\n    //   console.log(error);\r\n    // }\r\n  };\r\n\r\n  return (\r\n    <div className='container-p mt-5 mb-5'>\r\n      <div className='container-z py-4'>\r\n        <Row>\r\n          <div className='d-flex col-8'>\r\n            <input\r\n              type='text'\r\n              onChange={handleInput}\r\n              style={{ width: '100%' }}\r\n            ></input>\r\n          </div>\r\n          <div className='d-flex col-4'>\r\n            <button onClick={handleClick} style={{ width: '100%' }}>\r\n              Get\r\n            </button>\r\n          </div>\r\n        </Row>\r\n        <Row className='m-5 d-flex justify-content-between text-center'>\r\n          <div>\r\n            <h3>WALLET</h3>\r\n            <p>{cyberBalance.toLocaleString(undefined, { maximumFractionDigits: 2 })}</p>\r\n          </div>\r\n          <div>\r\n            <h3>STAKE</h3>\r\n            <p>{cyberStakedBalance.toLocaleString()}</p>\r\n          </div>\r\n        </Row>\r\n        <Row>\r\n          <Col md={8} sm={12} className='p-0'>\r\n            <table className='table m-0'>\r\n              <thead>\r\n                <tr>\r\n                  <td>\r\n                    <h3 className='text-left'>CityNFT</h3>\r\n                  </td>\r\n                  <td>\r\n                    <h3 className='text-center'>WALLET</h3>\r\n                  </td>\r\n                  <td>\r\n                    <h3 className='text-center'>STAKE</h3>\r\n                  </td>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {sftDatas?.map((item: any, index: any) => {\r\n                  return (\r\n                    <tr key={index}>\r\n                      <td>\r\n                        <p>{item.name}</p>\r\n                      </td>\r\n                      <td className='text-center'>\r\n                        <p>{item.wallet}</p>\r\n                      </td>\r\n                      <td className='text-center'>\r\n                        <p>{item.staked}</p>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </Col>\r\n          <Col md={4} sm={12} className='p-0'>\r\n            <table className='table m-0'>\r\n              <thead>\r\n                <tr>\r\n                  <td>\r\n                    <h3 className='text-left'>CitizenNFT</h3>\r\n                  </td>\r\n                  <td>\r\n                    <h3 className='text-center'>WALLET</h3>\r\n                  </td>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {citizenSftDatas?.map((item: any, index: any) => {\r\n                  return (\r\n                    <tr key={index}>\r\n                      <td>\r\n                        <p>{item.name}</p>\r\n                      </td>\r\n                      <td className='text-center'>\r\n                        <p>{item.wallet}</p>\r\n                      </td>\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\pages\\Home\\index.tsx",["94","95"],"import React, { useState, useEffect } from 'react';\r\nimport { useGetAccountInfo } from '@multiversx/sdk-dapp/hooks';\r\nimport { useGetNetworkConfig, useGetPendingTransactions } from '@multiversx/sdk-dapp/hooks';\r\nimport { sendTransactions } from '@multiversx/sdk-dapp/services';\r\nimport { refreshAccount } from '@multiversx/sdk-dapp/utils';\r\nimport {\r\n  TransactionPayload,\r\n  Address,\r\n  SmartContract,\r\n  AbiRegistry,\r\n  BigUIntValue,\r\n  ContractFunction,\r\n  AddressValue,\r\n  SmartContractAbi,\r\n  ResultsParser,\r\n  TypedValue,\r\n  BytesValue,\r\n  ArgSerializer\r\n} from '@multiversx/sdk-core/out';\r\nimport { ApiNetworkProvider } from '@multiversx/sdk-network-providers/out';\r\n\r\nimport axios from 'axios';\r\nimport BigNumber from 'bignumber.js/bignumber.js';\r\nimport { Modal } from 'react-bootstrap';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport esdtAbi from 'abi/esdt/city-staking-sc.abi.json';\r\nimport {\r\n  ESDT_STAKING_CONTRACT_ADDRESS,\r\n  ESDT_STAKING_CONTRACT_NAME,\r\n  TOKEN_ID,\r\n  TOKEN_DECIMAL,\r\n  GATEWAY,\r\n  YEARLY_TOKEN_DISTRIBUTION\r\n} from 'config';\r\nimport { SECOND_IN_MILLI } from 'utils/const';\r\n\r\nimport { convertWeiToEgld, convertTimestampToDays } from 'utils/convert';\r\n\r\nimport './index.scss';\r\n\r\nconst Home = () => {\r\n  const { address } = useGetAccountInfo();\r\n  const isLoggedIn = Boolean(address);\r\n  const { hasPendingTransactions } = useGetPendingTransactions();\r\n  const { network } = useGetNetworkConfig();\r\n  const networkProvider = new ApiNetworkProvider(network.apiAddress);\r\n\r\n  // load smart contract abi and parse it to SmartContract object for tx\r\n  const [contractInteractor, setContractInteractor] = useState<any>(undefined);\r\n  useEffect(() => {\r\n    const ABI = esdtAbi as any;\r\n    // console.log(ABI);\r\n    (async () => {\r\n      const abiRegistry = AbiRegistry.create(ABI);\r\n      const abi = new SmartContractAbi(abiRegistry, [\r\n        ESDT_STAKING_CONTRACT_NAME\r\n      ]);\r\n      const contract = new SmartContract({\r\n        address: new Address(ESDT_STAKING_CONTRACT_ADDRESS),\r\n        abi: abi\r\n      });\r\n      setContractInteractor(contract);\r\n    })();\r\n  }, []); // [] makes useEffect run once\r\n\r\n  const [cyberBalance, setCyberBalance] = useState(0);\r\n  const [stakingStatus, setStakingStatus] = useState<any>();\r\n  const [accountStatus, setAccountStatus] = useState<any>();\r\n  const [baseApr, setBaseApr] = useState(0);\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (!isLoggedIn) return;\r\n\r\n      const url = GATEWAY + '/accounts/' + address + '/tokens/' + TOKEN_ID;\r\n      const response: any = await axios.get(url);\r\n      const token = response.data;\r\n      const balance = token['balance'] / Math.pow(10, token['decimals']);\r\n      // console.log(balance);\r\n      setCyberBalance(Math.floor(balance * 100) / 100);\r\n    })();\r\n\r\n    (async () => {\r\n      if (!contractInteractor) return;\r\n\r\n      const query = contractInteractor.createQuery({\r\n        func: new ContractFunction('getStakingStatus')\r\n      });\r\n      const resultsParser = new ResultsParser();\r\n      const response = await networkProvider.queryContract(query);\r\n      const endpointDefinition =\r\n        contractInteractor.getEndpoint('getStakingStatus');\r\n      const res = resultsParser.parseQueryResponse(\r\n        response,\r\n        endpointDefinition\r\n      );\r\n      const value = res.firstValue?.valueOf();\r\n\r\n      const status = {\r\n        stake_token_id: value.stake_token_id.toString(),\r\n        reward_token_id: value.reward_token_id.toString(),\r\n        unbond_duration: value.unbond_duration.toNumber() * SECOND_IN_MILLI,\r\n        total_stake_balance: convertWeiToEgld(\r\n          value.total_stake_balance.toNumber(),\r\n          TOKEN_DECIMAL\r\n        )\r\n      };\r\n      // console.log(status);\r\n      setStakingStatus(status);\r\n      const apr =\r\n        (YEARLY_TOKEN_DISTRIBUTION / status.total_stake_balance) * 100;\r\n      setBaseApr(apr);\r\n    })();\r\n\r\n    (async () => {\r\n      if (!contractInteractor) return;\r\n\r\n      if (isLoggedIn) {\r\n        const query = contractInteractor.createQuery({\r\n          func: new ContractFunction('getAccountState'),\r\n          args: [new AddressValue(new Address(address))]\r\n        });\r\n        const resultsParser = new ResultsParser();\r\n        const response = await networkProvider.queryContract(query);\r\n        const endpointDefinition =\r\n          contractInteractor.getEndpoint('getAccountState');\r\n        const res = resultsParser.parseQueryResponse(\r\n          response,\r\n          endpointDefinition\r\n        );\r\n        const value = res.firstValue?.valueOf();\r\n\r\n        const status = {\r\n          user_stake_balance: convertWeiToEgld(\r\n            value.user_stake_balance.toNumber(),\r\n            TOKEN_DECIMAL\r\n          ),\r\n          user_rewards: convertWeiToEgld(\r\n            value.user_rewards.toNumber(),\r\n            TOKEN_DECIMAL\r\n          ),\r\n          user_unbonding_balance: convertWeiToEgld(\r\n            value.user_unbonding_balance.toNumber(),\r\n            TOKEN_DECIMAL\r\n          ),\r\n          user_unbonded_balance: convertWeiToEgld(\r\n            value.user_unbonded_balance.toNumber(),\r\n            TOKEN_DECIMAL\r\n          ),\r\n          user_unbonding_start_timestamp:\r\n            value.user_unbonding_start_timestamp.toNumber() * SECOND_IN_MILLI,\r\n          user_unbonding_end_timestamp:\r\n            value.user_unbonding_end_timestamp.toNumber() * SECOND_IN_MILLI,\r\n          apr: value.apr.toNumber() / 100\r\n        };\r\n        // console.log(status);\r\n        setAccountStatus(status);\r\n      }\r\n    })();\r\n  }, [contractInteractor, hasPendingTransactions]);\r\n\r\n  const [showModal, setShowModal] = React.useState<boolean>(false);\r\n  const [isStakeModal, setIsStakeModal] = React.useState<boolean>(true);\r\n  const [value, setValue] = useState(0);\r\n  const [errorMsg, setErrorMsg] = useState('');\r\n\r\n  const handleInput = (e: any) => {\r\n    const value = e.target.value;\r\n    if (isStakeModal) {\r\n      if (value > cyberBalance) {\r\n        setErrorMsg('The amount you are trying to stake is too high');\r\n      } else {\r\n        setErrorMsg('');\r\n      }\r\n    } else {\r\n      if (value > accountStatus?.user_stake_balance) {\r\n        setErrorMsg('The amount you are trying to unstake is too high');\r\n      } else {\r\n        setErrorMsg('');\r\n      }\r\n    }\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const handleMax = () => {\r\n    let maxPurchase = 0;\r\n    if (isStakeModal) {\r\n      maxPurchase = cyberBalance;\r\n    } else {\r\n      maxPurchase = accountStatus?.user_stake_balance;\r\n    }\r\n    setValue(maxPurchase);\r\n  };\r\n\r\n  function onShowStakeModal() {\r\n    if (!address) {\r\n      // onShowAlertModal('You should connect your wallet first!');\r\n      return;\r\n    }\r\n    setIsStakeModal(true);\r\n    setShowModal(true);\r\n  }\r\n\r\n  function onShowUnstakeModal() {\r\n    if (!address) {\r\n      // onShowAlertModal('You should connect your wallet first!');\r\n      return;\r\n    }\r\n    setIsStakeModal(false);\r\n    setShowModal(true);\r\n  }\r\n\r\n  async function handleStake() {\r\n    //\r\n    if (value <= 0 || value > cyberBalance) {\r\n      setErrorMsg('The amount is not valid');\r\n      return;\r\n    }\r\n\r\n    const stakeAmount = new BigNumber(value).multipliedBy(\r\n      Math.pow(10, TOKEN_DECIMAL)\r\n    );\r\n\r\n    const args: TypedValue[] = [\r\n      BytesValue.fromUTF8(TOKEN_ID),\r\n      new BigUIntValue(stakeAmount.valueOf()),\r\n      BytesValue.fromUTF8('stake')\r\n    ];\r\n\r\n    const { argumentsString } = new ArgSerializer().valuesToString(args);\r\n    const data = new TransactionPayload(`ESDTTransfer@${argumentsString}`);\r\n    const tx = {\r\n      receiver: ESDT_STAKING_CONTRACT_ADDRESS,\r\n      gasLimit: 10000000,\r\n      data: data.toString(),\r\n      value: 0\r\n    };\r\n    await refreshAccount();\r\n\r\n    await sendTransactions({\r\n      transactions: tx,\r\n      transactionsDisplayInfo: {\r\n        processingMessage: 'Processing Staking transaction',\r\n        errorMessage: 'An error has occured during Staking',\r\n        successMessage: 'Staking transaction successful'\r\n      },\r\n      redirectAfterSign: false\r\n    });\r\n\r\n    setShowModal(false);\r\n  }\r\n\r\n  async function handleUnstake() {\r\n    if (value > accountStatus?.user_stake_balance || value <= 0) {\r\n      setErrorMsg('The amount is not valid');\r\n      return;\r\n    }\r\n\r\n    let tx;\r\n    if (\r\n      Number(value).toFixed(2) == accountStatus?.user_stake_balance.toFixed(2)\r\n    ) {\r\n      tx = {\r\n        data: 'unstake',\r\n        gasLimit: 10000000,\r\n        value: 0,\r\n        receiver: ESDT_STAKING_CONTRACT_ADDRESS\r\n      };\r\n    } else {\r\n      const unstakeAmount = new BigNumber(value).multipliedBy(\r\n        Math.pow(10, TOKEN_DECIMAL)\r\n      );\r\n\r\n      const args: TypedValue[] = [new BigUIntValue(unstakeAmount.valueOf())];\r\n\r\n      const { argumentsString } = new ArgSerializer().valuesToString(args);\r\n      const data = new TransactionPayload(`unstake@${argumentsString}`);\r\n\r\n      tx = {\r\n        data: data.toString(),\r\n        gasLimit: 10000000,\r\n        value: 0,\r\n        receiver: ESDT_STAKING_CONTRACT_ADDRESS\r\n      };\r\n    }\r\n\r\n    await refreshAccount();\r\n    await sendTransactions({\r\n      transactions: tx,\r\n      transactionsDisplayInfo: {\r\n        processingMessage: 'Processing Unstake transaction',\r\n        errorMessage: 'An error has occured during Unstake',\r\n        successMessage: 'Unstake transaction successful'\r\n      },\r\n      redirectAfterSign: false\r\n    });\r\n\r\n    setShowModal(false);\r\n  }\r\n\r\n  async function reinvest() {\r\n    if (!address) {\r\n      // onShowAlertModal('You should connect your wallet first!');\r\n      return;\r\n    }\r\n\r\n    if (accountStatus.user_rewards > 0) {\r\n      const tx = {\r\n        receiver: ESDT_STAKING_CONTRACT_ADDRESS,\r\n        data: 'reinvest',\r\n        value: 0,\r\n        gasLimit: 6000000\r\n      };\r\n\r\n      await refreshAccount();\r\n      await sendTransactions({\r\n        transactions: tx\r\n      });\r\n    } else {\r\n      // onShowAlertModal('You don\\'t have rewards.');\r\n    }\r\n  }\r\n\r\n  async function claim() {\r\n    if (!address) {\r\n      // onShowAlertModal('You should connect your wallet first!');\r\n      return;\r\n    }\r\n\r\n    const tx = {\r\n      receiver: ESDT_STAKING_CONTRACT_ADDRESS,\r\n      data: 'claim',\r\n      value: 0,\r\n      gasLimit: 10000000\r\n    };\r\n\r\n    await refreshAccount();\r\n    await sendTransactions({\r\n      transactions: tx\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className='container'>\r\n      <Row>\r\n        <Col lg={6} md={6} sm={12} className='container-left'>\r\n          <h1 className='cpc-styled'>Stake your CYBER</h1>\r\n          <p>\r\n            The purpose of &apos;CYBER token staking&apos; is to create a\r\n            revenue model while relieving investors of selling pressure.\r\n          </p>\r\n\r\n          <p>\r\n            <span style={{ fontWeight: 'bold' }}>Q:</span> What is the APR?\r\n            <br />\r\n            <span style={{ fontWeight: 'bold' }}>A:</span> With CYBER token stake, 20M CYBER will be distributed over 6 years. So when we do the math, we see the staking SC generates 0.1057 CYBER every second, which will be distributed to the stakers according to their share. Formula:\r\n            <br />— <span style={{ fontWeight: 'bold' }}>Pool Share</span> =\r\n            Your Staked CYBER / Total Staked CYBER\r\n            <br />—{' '}\r\n            <span style={{ fontWeight: 'bold' }}>\r\n              Yearly Distributed CYBER\r\n            </span>{' '}\r\n            = 20,000,000 / 6 = 3,333,333 CYBER\r\n            <br />— <span style={{ fontWeight: 'bold' }}>APR</span> = YDC /\r\n            Total Staked CYBER\r\n            <br />— <span style={{ fontWeight: 'bold' }}>\r\n              TOTAL STAKED:\r\n            </span>{' '}\r\n            Total amount of staked CYBER.\r\n            <br />\r\n            <br />\r\n            <span style={{ fontWeight: 'bold' }}>NOTICE:</span> The unbonding period is 5 days. Every unstaking operation will reset the duration.\r\n          </p>\r\n\r\n          <div className='container-left-buttons'>\r\n            <a\r\n              href='https://xexchange.com/swap'\r\n              target='_blank'\r\n              rel='noreferrer'\r\n            >\r\n              <button>BUY CYBER</button>\r\n            </a>\r\n            <a\r\n              href='https://cyberpunkcity.com'\r\n            >\r\n            <button className='ml-3'>\r\n                GO TO HOMEPAGE\r\n            </button>\r\n            </a>\r\n          </div>\r\n        </Col>\r\n        <Col lg={6} md={6} sm={12}>\r\n          <div className='container-token-staking'>\r\n            <div className='row mb-5'>\r\n              <div className='col-6 text-left'>\r\n                <div className='row-title static'>TOTAL STAKED</div>\r\n                <div className='row-body'>\r\n                  {stakingStatus\r\n                    ? stakingStatus.total_stake_balance.toLocaleString(\r\n                        undefined,\r\n                        { minimumFractionDigits: 2, maximumFractionDigits: 2 }\r\n                      )\r\n                    : '-'}{' '}\r\n                  $CYBER\r\n                </div>\r\n              </div>\r\n              <div className='col-6 text-right'>\r\n                <div className='row-title static'>APR</div>\r\n                <div className='row-body'>\r\n                  {accountStatus\r\n                    ? accountStatus.apr.toFixed(2)\r\n                    : baseApr.toFixed(2)}{' '}\r\n                  %\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className='row mb-5'>\r\n              <div className='col-6 text-left'>\r\n                <div className='row-title'>MY BALANCE</div>\r\n                <div className='row-body'>\r\n                  {cyberBalance.toLocaleString(undefined, {\r\n                    minimumFractionDigits: 2,\r\n                    maximumFractionDigits: 2\r\n                  })}{' '}\r\n                  $CYBER\r\n                </div>\r\n                <button\r\n                  className='is-style-cpc-btn-styled stake'\r\n                  onClick={onShowStakeModal}\r\n                >\r\n                  STAKE\r\n                </button>\r\n              </div>\r\n              <div className='col-6 text-right'>\r\n                <div className='row-title'>MY STAKED</div>\r\n                <div className='row-body'>\r\n                  {accountStatus\r\n                    ? accountStatus.user_stake_balance.toLocaleString(\r\n                        undefined,\r\n                        { minimumFractionDigits: 2, maximumFractionDigits: 2 }\r\n                      )\r\n                    : '-'}\r\n                </div>\r\n                <button\r\n                  className='is-style-cpc-btn-styled unstake'\r\n                  onClick={onShowUnstakeModal}\r\n                >\r\n                  UNSTAKE\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <div className='row mb-4'>\r\n              <div className='col-6 text-left'>\r\n                <div className='row-title'>MY EARNED</div>\r\n                <div className='row-body'>\r\n                  {accountStatus\r\n                    ? accountStatus.user_rewards.toLocaleString(undefined, {\r\n                        minimumFractionDigits: 2,\r\n                        maximumFractionDigits: 2\r\n                      })\r\n                    : '-'}\r\n                </div>\r\n                <button\r\n                  className='is-style-cpc-btn-styled reinvest'\r\n                  onClick={reinvest}\r\n                >\r\n                  REINVEST\r\n                </button>\r\n                <button\r\n                  className='is-style-cpc-btn-styled harvest'\r\n                  onClick={claim}\r\n                >\r\n                  HARVEST\r\n                </button>\r\n              </div>\r\n              <div className='col-6 text-right'>\r\n                <div className='row-title'>MY UNBONDING</div>\r\n                <div className='row-body'>\r\n                  {accountStatus\r\n                    ? accountStatus.user_unbonding_balance.toLocaleString(\r\n                        undefined,\r\n                        { minimumFractionDigits: 2, maximumFractionDigits: 2 }\r\n                      )\r\n                    : '-'}\r\n                </div>\r\n                <div className='days-left'>\r\n                  {accountStatus\r\n                    ? accountStatus.user_unbonding_end_timestamp > Date.now()\r\n                      ? convertTimestampToDays(\r\n                          accountStatus.user_unbonding_end_timestamp -\r\n                            Date.now()\r\n                        )\r\n                      : 0\r\n                    : '-'}{' '}\r\n                  days left\r\n                </div>\r\n                {/* <div className='days-left'>\r\n                  {stakingStatus\r\n                    ? convertTimestampToDays(stakingStatus.unbond_duration)\r\n                    : '-'}{' '}\r\n                  days left\r\n                </div>*/}\r\n                <div className='row-title'>UNCLAIMED</div>\r\n                <div className='row-body'>\r\n                  {accountStatus\r\n                    ? accountStatus.user_unbonded_balance.toLocaleString(\r\n                        undefined,\r\n                        { minimumFractionDigits: 2, maximumFractionDigits: 2 }\r\n                      )\r\n                    : '-'}\r\n                </div>\r\n                <button\r\n                  className='is-style-cpc-btn-styled claim'\r\n                  onClick={claim}\r\n                >\r\n                  CLAIM\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n      <Modal\r\n        show={showModal}\r\n        onHide={() => {\r\n          setShowModal(false);\r\n        }}\r\n        centered\r\n      >\r\n        <Modal.Body>\r\n          <>\r\n            {isStakeModal ? (\r\n              <div className='title'>\r\n                MY BALANCE:\r\n                <br />{' '}\r\n                {cyberBalance.toLocaleString(undefined, {\r\n                  minimumFractionDigits: 2,\r\n                  maximumFractionDigits: 2\r\n                })}{' '}\r\n                CYBER\r\n              </div>\r\n            ) : (\r\n              <div className='title'>\r\n                MY STAKED:\r\n                <br />{' '}\r\n                {accountStatus\r\n                  ? accountStatus.user_stake_balance.toLocaleString(undefined, {\r\n                      minimumFractionDigits: 2,\r\n                      maximumFractionDigits: 2\r\n                    })\r\n                  : '-'}{' '}\r\n                CYBER\r\n              </div>\r\n            )}\r\n            <div className='modal-action'>\r\n              <div className='staking-amount-input'>\r\n                <input\r\n                  type='text'\r\n                  placeholder='amount'\r\n                  value={value}\r\n                  onChange={handleInput}\r\n                />\r\n                <div\r\n                  className='staking-amount-input-text-max'\r\n                  onClick={handleMax}\r\n                >\r\n                  MAX\r\n                </div>\r\n              </div>\r\n              <div className='col-12'>\r\n                <span className='error-message'>{errorMsg}</span>\r\n              </div>\r\n              {isStakeModal ? (\r\n                <button\r\n                  className='is-style-cpc-btn-styled stake'\r\n                  onClick={handleStake}\r\n                >\r\n                  STAKE\r\n                </button>\r\n              ) : (\r\n                <button\r\n                  className='is-style-cpc-btn-styled unstake'\r\n                  onClick={handleUnstake}\r\n                >\r\n                  UNSTAKE\r\n                </button>\r\n              )}\r\n            </div>\r\n          </>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\components\\PageTitle\\index.tsx",[],"E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\components\\Layout\\Navbar\\index.tsx",[],"E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\components\\Layout\\Footer\\index.tsx",["96"],"import React from 'react';\r\nimport { ReactComponent as HeartIcon } from '../../../assets/img/heart.svg';\r\nimport logoGif from './../../../assets/img/logo.gif';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className='text-center mt-2 mb-3'>\r\n      <img src={logoGif} className='cpc-logo-gif' alt='Cyberpunk City' />\r\n      <br />\r\n      <div>\r\n        <a\r\n          {...{\r\n            target: '_blank'\r\n          }}\r\n          className='d-flex align-items-center'\r\n          href='https://cyberpunkcity.com/'\r\n        >\r\n          Made with <HeartIcon className='mx-1' /> by Cyberpunk City.\r\n        </a>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\utils\\const.tsx",[],"E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\utils\\convert.tsx",[],"E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\components\\Card\\index.tsx",["97"],"import React, { useState, useEffect } from 'react';\r\nimport { useGetAccountInfo } from '@multiversx/sdk-dapp/hooks';\r\nimport { sendTransactions } from '@multiversx/sdk-dapp/services';\r\nimport { refreshAccount } from '@multiversx/sdk-dapp/utils';\r\nimport {\r\n  TransactionPayload,\r\n  Address,\r\n  BigUIntValue,\r\n  AddressValue,\r\n  TypedValue,\r\n  BytesValue,\r\n  ArgSerializer\r\n} from '@multiversx/sdk-core/out';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Time from 'components/Time';\r\nimport { SFT_STAKING_CONTRACT_ADDRESS, SFT_COLLECTION_ID } from 'config';\r\nimport { SFT_IMAGES, SFT_NAMES } from 'data';\r\nimport { routeNames } from 'routes';\r\n\r\nimport './index.scss';\r\n\r\nconst Card = (props: any) => {\r\n  const navigate = useNavigate();\r\n  const { address } = useGetAccountInfo();\r\n  const isLoggedIn = Boolean(address);\r\n\r\n  const handleLogin = () => {\r\n    navigate(routeNames.unlock, { replace: true });\r\n  };\r\n\r\n  const [balance, setBalance] = useState(0);\r\n  useEffect(() => {\r\n    if (props.status === 1) {\r\n      setBalance(props.item?.user_current_amount_per_nonce);\r\n    } else if (props.status === 2) {\r\n      setBalance(props.item?.user_staked_amount_per_nonce);\r\n    } else if (props.status === 3) {\r\n      setBalance(props.item?.user_unbonding_amount_per_nonce);\r\n    } else {\r\n      setBalance(props.item?.user_unbonded_amount_per_nonce);\r\n    }\r\n  }, []);\r\n\r\n  const [value, setValue] = useState(1);\r\n\r\n  const handleInput = (e: any) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  const handleAction = async () => {\r\n    if (props.status === 1) {\r\n      // stake\r\n      const args: TypedValue[] = [\r\n        BytesValue.fromUTF8(SFT_COLLECTION_ID),\r\n        new BigUIntValue(props.item?.nft_nonce.valueOf()),\r\n        new BigUIntValue(value.valueOf()),\r\n        new AddressValue(new Address(SFT_STAKING_CONTRACT_ADDRESS)),\r\n        BytesValue.fromUTF8('stake')\r\n      ];\r\n\r\n      const { argumentsString } = new ArgSerializer().valuesToString(args);\r\n      const data = new TransactionPayload(`ESDTNFTTransfer@${argumentsString}`);\r\n      const tx = {\r\n        receiver: address,\r\n        gasLimit: 10000000,\r\n        value: 0,\r\n        data: data.toString()\r\n      };\r\n      await refreshAccount();\r\n\r\n      await sendTransactions({\r\n        transactions: tx,\r\n        transactionsDisplayInfo: {\r\n          processingMessage: 'Processing Staking transaction',\r\n          errorMessage: 'An error has occured during Stake',\r\n          successMessage: 'Staking transaction successful'\r\n        },\r\n        redirectAfterSign: false\r\n      });\r\n    } else if (props.status === 2) {\r\n      // unstake\r\n      const args: TypedValue[] = [\r\n        BytesValue.fromUTF8(SFT_COLLECTION_ID),\r\n        new BigUIntValue(props.item?.nft_nonce.valueOf()),\r\n        new BigUIntValue(value.valueOf())\r\n      ];\r\n\r\n      const { argumentsString } = new ArgSerializer().valuesToString(args);\r\n      const data = new TransactionPayload(`unstake@${argumentsString}`);\r\n      const tx = {\r\n        receiver: SFT_STAKING_CONTRACT_ADDRESS,\r\n        gasLimit: 10000000,\r\n        value: 0,\r\n        data: data.toString()\r\n      };\r\n      await refreshAccount();\r\n\r\n      await sendTransactions({\r\n        transactions: tx,\r\n        transactionsDisplayInfo: {\r\n          processingMessage: 'Processing Unstaking transaction',\r\n          errorMessage: 'An error has occured during Unstake',\r\n          successMessage: 'Unstaking transaction successful'\r\n        },\r\n        redirectAfterSign: false\r\n      });\r\n    } else if (props.status === 4) {\r\n      // claim nfts\r\n      const args: TypedValue[] = [\r\n        BytesValue.fromUTF8(SFT_COLLECTION_ID),\r\n        new BigUIntValue(props.item?.nft_nonce.valueOf()),\r\n        new BigUIntValue(value.valueOf())\r\n      ];\r\n\r\n      const { argumentsString } = new ArgSerializer().valuesToString(args);\r\n      const data = new TransactionPayload(`claimNft@${argumentsString}`);\r\n      const tx = {\r\n        receiver: SFT_STAKING_CONTRACT_ADDRESS,\r\n        gasLimit: 10000000,\r\n        value: 0,\r\n        data: data.toString()\r\n      };\r\n      await refreshAccount();\r\n\r\n      await sendTransactions({\r\n        transactions: tx,\r\n        transactionsDisplayInfo: {\r\n          processingMessage: 'Processing Claim transaction',\r\n          errorMessage: 'An error has occured during Claim',\r\n          successMessage: 'Claim transaction successful'\r\n        },\r\n        redirectAfterSign: false\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleMax = () => {\r\n    setValue(balance);\r\n  };\r\n\r\n  return (\r\n    <div className='presale-container'>\r\n      <div className='presale-container-status'>\r\n        <div className='presale-container-status-left'>\r\n          <div className='presale-container-status-phase-1'>\r\n            {SFT_NAMES[props.item?.nft_nonce - 1]}\r\n          </div>\r\n        </div>\r\n        {props.status === 3 ? (\r\n          <Time\r\n            leftTimestamp={props.item?.user_unbonding_end_timestamp_per_nonce}\r\n          />\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </div>\r\n      <div className='presale-container-sft-asset'>\r\n        <img src={SFT_IMAGES[props.item?.nft_nonce - 1]} alt='sft-image'></img>\r\n      </div>\r\n      <div className='presale-container-status-sale-amount'>\r\n        {props.status === 1 ? 'Balance' : props.status === 2 ? 'Staked' : props.status === 3 ? 'Unbonding' : 'Unbonded'} : {balance} SFT\r\n      </div>\r\n      {props.status !== 3 ? (\r\n        <div className='presale-container-input'>\r\n          <input\r\n            type='text'\r\n            name='SFT amount'\r\n            placeholder='Amount'\r\n            aria-label='SFT amount'\r\n            value={value}\r\n            onChange={handleInput}\r\n          />\r\n          <div className='presale-container-input-text-max' onClick={handleMax}>\r\n            MAX\r\n          </div>\r\n          {isLoggedIn ? (\r\n            <button onClick={handleAction} className='is-style-cpc-btn-styled'>\r\n              {props.status === 1\r\n                ? 'STAKE'\r\n                : props.status === 2\r\n                  ? 'UNSTAKE'\r\n                  : 'WITHDRAW'}\r\n            </button>\r\n          ) : (\r\n            <button onClick={handleLogin}>CONNECT</button>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\data.tsx",[],"E:\\work\\blockchain\\18_cyberpunkcity\\cyberpunkcity-dapp\\src\\components\\Time\\index.tsx",[],{"ruleId":"98","severity":1,"message":"99","line":6,"column":1,"nodeType":"100","endLine":21,"endColumn":35,"fix":"101"},{"ruleId":"102","severity":1,"message":"103","line":39,"column":28,"nodeType":"104","messageId":"105","endLine":39,"endColumn":50},{"ruleId":"102","severity":1,"message":"106","line":68,"column":10,"nodeType":"104","messageId":"105","endLine":68,"endColumn":16},{"ruleId":"107","severity":1,"message":"108","line":90,"column":21,"nodeType":"104","messageId":"109","endLine":90,"endColumn":27},{"ruleId":"107","severity":1,"message":"108","line":133,"column":13,"nodeType":"104","messageId":"109","endLine":133,"endColumn":19},{"ruleId":"107","severity":1,"message":"108","line":173,"column":17,"nodeType":"104","messageId":"109","endLine":173,"endColumn":23},{"ruleId":"102","severity":1,"message":"110","line":262,"column":36,"nodeType":"104","messageId":"105","endLine":262,"endColumn":46},{"ruleId":"102","severity":1,"message":"110","line":300,"column":36,"nodeType":"104","messageId":"105","endLine":300,"endColumn":46},{"ruleId":"102","severity":1,"message":"111","line":2,"column":31,"nodeType":"104","messageId":"105","endLine":2,"endColumn":56},{"ruleId":"98","severity":1,"message":"99","line":3,"column":1,"nodeType":"100","endLine":11,"endColumn":35,"fix":"112"},{"ruleId":"107","severity":1,"message":"113","line":274,"column":15,"nodeType":"104","messageId":"109","endLine":274,"endColumn":20},{"ruleId":"98","severity":1,"message":"99","line":6,"column":1,"nodeType":"100","endLine":19,"endColumn":35,"fix":"114"},{"ruleId":"107","severity":1,"message":"113","line":167,"column":11,"nodeType":"104","messageId":"109","endLine":167,"endColumn":16},{"ruleId":"98","severity":1,"message":"115","line":3,"column":1,"nodeType":"100","endLine":3,"endColumn":54,"fix":"116"},{"ruleId":"98","severity":1,"message":"99","line":5,"column":1,"nodeType":"100","endLine":13,"endColumn":35,"fix":"117"},"import/order","`@multiversx/sdk-core/out` import should occur before import of `@multiversx/sdk-dapp/hooks`","ImportDeclaration",{"range":"118","text":"119"},"@typescript-eslint/no-unused-vars","'convertTimestampToDays' is defined but never used.","Identifier","unusedVar","'status' is assigned a value but never used.","@typescript-eslint/no-shadow","'status' is already declared in the upper scope.","noShadow","'index' is defined but never used.","'useGetPendingTransactions' is defined but never used.",{"range":"120","text":"121"},"'value' is already declared in the upper scope.",{"range":"122","text":"123"},"`./../../../assets/img/logo.gif` import should occur before import of `../../../assets/img/heart.svg`",{"range":"124","text":"125"},{"range":"126","text":"127"},[53,626],"import {\r\n  Account,\r\n  TransactionPayload,\r\n  Address,\r\n  SmartContract,\r\n  AbiRegistry,\r\n  BigUIntValue,\r\n  ContractFunction,\r\n  AddressValue,\r\n  SmartContractAbi,\r\n  ResultsParser,\r\n  TokenPayment,\r\n  TypedValue,\r\n  BytesValue,\r\n  ArgSerializer\r\n} from '@multiversx/sdk-core/out';\r\nimport { useGetAccountInfo } from '@multiversx/sdk-dapp/hooks';\r\nimport { useGetNetworkConfig, useGetPendingTransactions } from '@multiversx/sdk-dapp/hooks';\r\nimport { sendTransactions } from '@multiversx/sdk-dapp/services';\r\nimport { refreshAccount } from '@multiversx/sdk-dapp/utils';\r\n",[42,304],"import {\r\n  Address,\r\n  SmartContract,\r\n  AbiRegistry,\r\n  ContractFunction,\r\n  AddressValue,\r\n  SmartContractAbi,\r\n  ResultsParser\r\n} from '@multiversx/sdk-core/out';\r\nimport { useGetNetworkConfig, useGetPendingTransactions } from '@multiversx/sdk-dapp/hooks';\r\n",[53,597],"import {\r\n  TransactionPayload,\r\n  Address,\r\n  SmartContract,\r\n  AbiRegistry,\r\n  BigUIntValue,\r\n  ContractFunction,\r\n  AddressValue,\r\n  SmartContractAbi,\r\n  ResultsParser,\r\n  TypedValue,\r\n  BytesValue,\r\n  ArgSerializer\r\n} from '@multiversx/sdk-core/out';\r\nimport { useGetAccountInfo } from '@multiversx/sdk-dapp/hooks';\r\nimport { useGetNetworkConfig, useGetPendingTransactions } from '@multiversx/sdk-dapp/hooks';\r\nimport { sendTransactions } from '@multiversx/sdk-dapp/services';\r\nimport { refreshAccount } from '@multiversx/sdk-dapp/utils';\r\n",[28,161],"import logoGif from './../../../assets/img/logo.gif';\r\nimport { ReactComponent as HeartIcon } from '../../../assets/img/heart.svg';\r\n",[53,409],"import {\r\n  TransactionPayload,\r\n  Address,\r\n  BigUIntValue,\r\n  AddressValue,\r\n  TypedValue,\r\n  BytesValue,\r\n  ArgSerializer\r\n} from '@multiversx/sdk-core/out';\r\nimport { useGetAccountInfo } from '@multiversx/sdk-dapp/hooks';\r\nimport { sendTransactions } from '@multiversx/sdk-dapp/services';\r\nimport { refreshAccount } from '@multiversx/sdk-dapp/utils';\r\n"]